<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/">
    <title>FX</title>
    <link href="https://scooorpion.github.io/feed.xml" rel="self" />
    <link href="https://scooorpion.github.io" />
    <updated>2024-07-16T20:51:45+08:00</updated>
    <author>
        <name>scooorpion</name>
    </author>
    <id>https://scooorpion.github.io</id>

    <entry>
        <title>Swift Notes</title>
        <author>
            <name>scooorpion</name>
        </author>
        <link href="https://scooorpion.github.io/swift-notes.html"/>
        <id>https://scooorpion.github.io/swift-notes.html</id>

        <updated>2024-07-16T20:51:45+08:00</updated>
            <summary>
                <![CDATA[
                    Basic 打印常量和变量 Printing&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <h2 id="basic">Basic</h2>
<h3 id="打印常量和变量-printing-constants-and-variables">打印常量和变量 <em>Printing Constants and Variables</em></h3>
<p><code>print(_:separator:terminator:)</code></p><ul>
<li><code>separator</code> : 用于分隔</li>
<li><code>terminator</code> : 用于结尾</li>
<li>字符串插值（string interpolation）：<code>&quot;\(value)&quot;</code></li>
</ul>
<h3 id="decimal">Decimal</h3>
<ul>
<li><p>四则运算一定要同类型，否则会造成精度缺失或者一些更严重的问题。</p></li>
<li><p>0.1 + 0.2 != 0.3</p><p>计算机内部使用二进制来表示浮点数，而二进制无法精确表示十进制的小数点后无限位的数值。 具体来说，十进制小数 <code>0.1</code> 在二进制中是一个无限循环小数。二进制中没有直接的表示方法来精确表示 <code>0.1</code>，因此计算机使用最接近的浮点数表示来近似它。同样，<code>0.2</code> 也是一个无法精确表示的十进制小数，在二进制中有类似的近似问题。 当你把两个这样的近似值相加时，结果会受到这种近似的影响，产生一个稍微大于 <code>0.3</code> 的值。这是浮点数精度问题的一个常见例子，也是为什么在涉及浮点数的比较时，经常需要设置一个误差范围（或者使用特定的数学库来处理高精度的小数运算）。</p><p> 在Swift中，你可以使用 <code>Double</code> 类型来进行浮点数运算，但是由于其内部表示的限制，你可能会遇到这种精度问题。如果你需要更精确的小数运算，可以考虑使用 <code>Decimal</code> 类型，它提供了更高的精度，但相应的也会消耗更多的内存和计算资源。</p></li>
</ul>
<p><code>Decimal</code> 需要 <strong>Foundation</strong> Framework，是一个可选类型（Optional）,你不能保证这个数字一定能转化成功</p><pre><code class="language-swift">import Foundation

import Foundation 
let decimal: Decimal = 1 
let decimal2 = Decimal（1）
let decimal3: Decimal = 3.24 //这个写法是有问题的，因为相当于在Decimal中存了一个Double
print（decima13）//3.2400000000003

let decimal4 = Decimal（string： &quot;hel1o&quot;）//
print（decima14）//nil
</code></pre>
<blockquote>
<p>Decimal 类型用于表示高精度的十进制数。由于直接将浮点数（如 Double）转换为 Decimal 可能会导致精度问题，因此需要使用字符串初始化 Decimal 以避免这种问题。</p></blockquote>
<pre><code class="language-swift">let a = Decimal（string： &quot;0.1&quot;）！ 
let b = Decimal（string： &quot;0.2&quot;）！
print（a + b） //0.3

//address the issue right?
</code></pre>
<h3 id="character--string-字符与字符串">Character &amp; String 字符与字符串</h3>
<p>Character由Unicode组成</p><p>String 的存储细节：</p><pre><code>你好棒👍 =&gt; 20320 22909 26834 128077 127998
</code></pre>
<p>其中后两串数字分别对应着👍：第一串表示✋🏻，第二串表示肤色（Amazing）</p><blockquote>
<p>String -&gt; 一串的 Character </p><p>Character -&gt; 一串的 Unicode </p><p>所以它們共同的特徵就是「都是一串的某個東西」 因此有一些共同的概念可以用，像是都可以數(count)</p></blockquote>
<p>一个工具叫zalgo text文字生成器，可以随机组合Unicode生成一些乱码的文字</p><h3 id="三元条件运算符-ternary-conditional-operator">三元条件运算符 <em>ternary conditional operator</em></h3>
<p>三元<em>条件运算符</em>是一种特殊的运算符，由三部分组成，形式为<code>question ? answer1 : answer2</code>。</p><p>如果<code>question</code>为真，则评估<code>answer1</code>并返回其值；否则，评估<code>answer2</code>并返回其值。</p><p>三元条件运算符是以下代码的简写：</p><pre><code class="language-swift">if question {
    answer1
} else {
    answer2
}
</code></pre>
<h2 id="函数">函数</h2>
<p>一些关于函数的概念：</p><ol>
<li><strong>形参（Formal Parameters 形式参数）</strong>：在函数定义中声明的参数，它们是函数内部使用的变量，用于接收传递给函数的值。</li>
<li><strong>实参（Actual Parameters 实际参数）</strong>：在函数调用时传递给函数的值，它们是实际的数据，用于初始化形参。</li>
<li><strong>返回类型</strong>：函数可以返回一个值，这个值的类型就是返回类型。如果函数不返回任何值，则返回类型为<code>void</code>。</li>
<li><strong>方法（Method）</strong>：在面向对象编程中，方法是与对象相关联的函数。它通常可以访问和操作对象的属性。</li>
<li><strong>属性（Property）</strong>：对象的属性是与对象状态相关的变量。在面向对象编程中，属性可以是变量或函数，用于表示对象的状态。</li>
</ol>
<blockquote>
<p>属性如何作为函数？在面向对象编程（OOP）中，属性可以被看作是对象的特征或状态，它们可以是简单的变量，也可以是通过计算得到的值，这就涉及到计算属性的概念。</p></blockquote>
<h3 id="函数参数名称与参数标签">函数参数名称与参数标签</h3>
<p>在Swift中，函数参数可以有两个名字：一个是参数标签（argument label），另一个是参数名称（parameter name）。参数标签在函数调用时使用，而参数名称在函数体内使用。</p><blockquote>
<p>有点绕，简单点说就是第一个<strong>参数标签</strong>用于调用的时候，第二个参数名称用于函数体里面用</p></blockquote>
<pre><code class="language-swift">func greet(person name: String) {
   //greet(参数标签 参数名称: String)
    print(&quot;Hello, \(name)!&quot;)
}

greet(person: &quot;Alice&quot;)
// 调用时使用参数标签 person
</code></pre>
<p>可以省略参数标签：</p><pre><code class="language-swift">func greet(_ name: String) {
    print(&quot;Hello, \(name)!&quot;)
}

greet(&quot;Alice&quot;)
// 这样就类似C++里面的调用方式
</code></pre>
<p><strong>参数标签和参数名称</strong></p><ul>
<li><strong>两个名称</strong>（参数标签和参数名称）：第一个名称是参数标签，用于函数调用时，第二个名称是参数名称，用于函数体内。</li>
<li><strong>一个名称</strong>（参数标签和参数名称相同）：如果只有一个名称，它既是参数标签，又是参数名称。</li>
</ul>
<pre><code class="language-swift">print(_: separator: terminator:)
//很明显这个separator就是参数标签==参数名称
</code></pre>
<h3 id="可变参数">可变参数</h3>
<p>一个*可变参数（variadic parameter）*可以接受零个或多个值。函数调用时，你可以用可变参数来指定函数参数可以被传入不确定数量的输入值。通过在变量类型名后面加入（<code>...</code>）的方式来定义可变参数。</p><p>可变参数的传入值在函数体中变为此类型的一个数组。例如，一个叫做 <code>numbers</code> 的 <code>Double...</code> 型可变参数，在函数体内可以当做一个叫 <code>numbers</code> 的 <code>[Double]</code> 型的数组常量。</p><p>下面的这个函数用来计算一组任意长度数字的 <em>算术平均数（arithmetic mean)</em>：</p><pre><code class="language-Swift">func arithmeticMean(_ numbers: Double...) -&gt; Double {
    var total: Double = 0
    for number in numbers {
        total += number
    }
    return total / Double(numbers.count)
}
arithmeticMean(1, 2, 3, 4, 5)
// 返回 3.0, 是这 5 个数的平均数。
arithmeticMean(3, 8.25, 18.75)
// 返回 10.0, 是这 3 个数的平均数。
</code></pre>
<p>一个函数能拥有多个可变参数。可变参数后的第一个形参前必须加上实参标签。实参标签用于区分实参是传递给可变参数，还是后面的形参。</p><p><code>print</code>中：</p><pre><code class="language-swift">func print(_ items: Any..., separator: String = &quot; &quot;, terminator: String = &quot;\n&quot;)
</code></pre>
<p>使用的<code>Any...</code>就表示可以用很多不同的类型，而且可以同时传入很多，(比如Int String Character etc.)</p><p><code>String = &quot; &quot;</code>这个是预设数值</p><h3 id="多重返回值函数">多重返回值函数</h3>
<p>你可以用元组（tuple）类型让多个值作为一个复合值从函数中返回。</p><p>下例中定义了一个名为 <code>minMax(array:)</code> 的函数，作用是在一个 <code>Int</code> 类型的数组中找出最小值与最大值。</p><pre><code class="language-Swift">func minMax(array: [Int]) -&gt; (min: Int, max: Int) { //多了一个(min: Int, max: Int)用于查询函数的返回值
    var currentMin = array[0]
    var currentMax = array[0]
    for value in array[1..&lt;array.count] {
        if value &lt; currentMin {
            currentMin = value
        } else if value &gt; currentMax {
            currentMax = value
        }
    }
    return (currentMin, currentMax)
}

//(currentMin, currentMax) -&gt; (min: Int, max: Int) 变量改为了上面所定义的min与max
</code></pre>
<p><code>minMax(array:)</code> 函数返回一个包含两个 <code>Int</code> 值的元组，这些值被标记为 <code>min</code> 和 <code>max</code> ，<strong>以便查询函数的返回值时可以通过名字访问它们。</strong></p><p>在 <code>minMax(array:)</code> 的函数体中，在开始的时候设置两个工作变量 <code>currentMin</code> 和 <code>currentMax</code> 的值为数组中的第一个数。然后函数会遍历数组中剩余的值并检查该值是否比 <code>currentMin</code> 和 <code>currentMax</code> 更小或更大。最后数组中的最小值与最大值作为一个包含两个 <code>Int</code> 值的元组返回。</p><p><strong>因为元组的成员值已被命名</strong>，因此可以通过 <code>.</code> 语法来检索找到的最小值与最大值：</p><pre><code class="language-Swift">let bounds = minMax(array: [8, -6, 2, 109, 3, 71])
print(&quot;min is \(bounds.min) and max is \(bounds.max)&quot;)
// 打印“min is -6 and max is 109”
</code></pre>
<p>需要注意的是，元组的成员不需要在元组从函数中返回时命名，因为它们的名字已经在函数返回类型中指定了。</p><h3 id="面向对象-oop-的哲学">面向对象 OOP 的哲学</h3>
<p>面向对象编程（OOP）是一种编程范式，强调将数据和操作数据的代码封装在一起，称之为“对象”。OOP的哲学在于模拟现实世界，通过对象和类来表示和组织程序。</p><h4 id="核心概念">核心概念</h4>
<ol>
<li><strong>对象（Object）</strong>：现实世界中的实体在程序中的抽象。对象具有属性（数据）和方法（行为）。</li>
<li><strong>类（Class）</strong>：对象的蓝图或模板。类定义了对象的属性和方法。</li>
<li><strong>封装（Encapsulation）</strong>：将数据和操作数据的方法封装在对象内部，隐藏实现细节。</li>
<li><strong>继承（Inheritance）</strong>：一个类可以继承另一个类的属性和方法，促进代码重用。</li>
<li><strong>多态（Polymorphism）</strong>：对象可以用多种形式存在，允许不同对象以相同接口调用。</li>
</ol>
<h4 id="为什么叫面向对象">为什么叫“面向对象”</h4>
<p>“面向对象”这个词反映了这种编程方法的核心：以对象为中心。程序中的所有东西都是对象，或者与对象相关。对象代表了程序中的实体，类定义了这些实体的结构和行为。</p><h5 id="面向对象-vs-面向过程">面向对象 vs 面向过程</h5>
<ul>
<li><strong>面向过程编程（Procedural Programming）</strong>：将程序视为一系列步骤或过程（函数）的集合。程序的焦点在于函数和过程的调用顺序。</li>
<li><strong>面向对象编程（Object-Oriented Programming）</strong>：将程序视为对象的集合。程序的焦点在于对象及其交互。</li>
</ul>
<h5 id="面向对象的本质和内涵">面向对象的本质和内涵</h5>
<ul>
<li><strong>模拟现实</strong>：通过对象和类模拟现实世界中的实体和关系。</li>
<li><strong>组织代码</strong>：通过类和对象组织代码，使其更具可读性和可维护性。</li>
<li><strong>封装和抽象</strong>：隐藏实现细节，只暴露必要的接口。</li>
<li><strong>复用性和可扩展性</strong>：通过继承和多态实现代码复用和扩展。</li>
</ul>
<h5 id="对象的真实含义">对象的真实含义</h5>
<p>在OOP中，对象是程序中的基本单元，包含了属性和方法：</p><ul>
<li><strong>属性（Attributes）</strong>：对象的状态或数据。</li>
<li><strong>方法（Methods）</strong>：对象的行为或功能。</li>
</ul>
<p>例如，一个“Person”对象可能有“name”和“age”属性，以及“greet”方法。</p><h5 id="计算属性">计算属性</h5>
<p>**计算属性是类或结构体中的属性，但它们的值不是直接存储的，而是通过计算得来的。**计算属性本质上是getter和setter函数：</p><ul>
<li><strong>Getter</strong>：返回计算属性的值。</li>
<li><strong>Setter</strong>：设置计算属性的值。</li>
</ul>
<h4 id="为什么属性可以作为函数">为什么属性可以作为函数</h4>
<p>计算属性之所以可以作为函数，是因为它们通过getter和setter函数计算和设置值。这样，属性的值可以根据其他属性动态计算，而不需要显式存储。</p><h4 id="示例：计算属性">示例：计算属性</h4>
<pre><code class="language-swift">class Circle {
    var radius: Double

    var circumference: Double {
        get {
            return 2 * .pi * radius
        }
        set {
            radius = newValue / (2 * .pi)
        }
    }

    init(radius: Double) {
        self.radius = radius
    }
}

let circle = Circle(radius: 5)
print(circle.circumference) // 输出 31.4159

circle.circumference = 31.4159
print(circle.radius) // 输出 5
</code></pre>
<p>在这个示例中，<code>circumference</code> 是一个计算属性，通过getter和setter函数计算和设置圆的周长和半径。</p><h3 id="元组-tuples--类型别名-type-aliases">元组 <em>Tuples</em> &amp; 类型别名 <em>type aliases</em></h3>
<p><em>元组（tuples）</em> 把多个值组合成一个复合值。元组内的值可以是任意类型，并不要求是相同类型。</p><blockquote>
<p>可以减去命名变量的痛苦，</p></blockquote>
<pre><code class="language-swift">let http404Error = (404, &quot;Not Found&quot;)
// http404Error 的类型是 (Int, String)，值是 (404, &quot;Not Found&quot;)
//http404Error.0 == 404
//http404Error.1 == &quot;Not Found&quot;
</code></pre>
<p>你可以把任意顺序的类型组合成一个元组，这个元组可以包含所有类型。只要你想，你可以创建一个类型为 <code>(Int, Int, Int)</code> 或者 <code>(String, Bool)</code> 或者其他任何你想要的组合的元组。</p><h4 id="元组分解（decompose）">元组分解（decompose）:</h4>
<pre><code class="language-swift">let (statusCode, statusMessage) = http404Error
print(&quot;The status code is \(statusCode)&quot;)
// 输出“The status code is 404”
print(&quot;The status message is \(statusMessage)&quot;)
// 输出“The status message is Not Found”
</code></pre>
<p>你可以使用 <code>typealias</code> 关键字来定义类型别名。</p><p>当你想要给现有类型起一个更有意义的名字时，类型别名非常有用。假设你正在处理特定长度的外部资源的数据：</p><pre><code class="language-swift">typealias AudioSample = UInt16
</code></pre>
<p>定义了一个类型别名之后，你可以在任何使用原始名的地方使用别名：</p><pre><code class="language-swift">var maxAmplitudeFound = AudioSample.min
// maxAmplitudeFound 现在是 0
</code></pre>
<p>本例中，<code>AudioSample</code> 被定义为 <code>UInt16</code> 的一个别名。因为它是别名，<code>AudioSample.min</code> 实际上是 <code>UInt16.min</code>，所以会给 <code>maxAmplitudeFound</code> 赋一个初值 <code>0</code>。</p><blockquote>
<p>你可以把Tuples当做一个简单的类型使用</p></blockquote>
<pre><code class="language-swift">typealias Human = （String, Double, String）
let man: Human = (&quot;A&quot;,10.2,&quot;B&quot;)// 建立了一个“Human类型&quot;，但其实本质上是一个元祖
</code></pre>
<h3 id="可选类型（optionals）">可选类型*（optionals）*</h3>
<p>可选类型表示两种可能： 或者有值， 你可以解析可选类型访问这个值， 或者根本没有值。</p><p><strong>An Example:</strong></p><p>Swift 的 <code>Int</code> 类型有一种<em>构造器</em>，作用是将一个 <code>String</code> 值转换成一个 <code>Int</code> 值。然而，并不是所有的字符串都可以转换成一个整数。字符串 <code>&quot;123&quot;</code> 可以被转换成数字 <code>123</code> ，但是字符串 <code>&quot;hello, world&quot;</code> 不行。</p><blockquote>
<p>构造器是一种特殊的函数，用于创建类、结构体或枚举的实例。它们不返回值，而是负责初始化实例的所有属性，并确保实例在第一次使用前处于有效状态。</p><pre><code class="language-swift">struct Person {
 var name: String
 var age: Int

 init(name: String, age: Int) { //就是构造函数
     self.name = name
     self.age = age
 }
}

let person = Person(name: &quot;John&quot;, age: 25)
</code></pre>
</blockquote>
<p>下面的例子使用这种构造器来尝试将一个 <code>String</code> 转换成 <code>Int</code>：</p><pre><code class="language-Swift">let possibleNumber = &quot;123&quot;
let convertedNumber = Int(possibleNumber)
// convertedNumber 被推测为类型 &quot;Int?&quot;， 或者类型 &quot;optional Int&quot;
</code></pre>
<p>因为该构造器可能会失败，所以它返回一个 <em>可选类型</em> （optional）<code>Int</code>，而不是一个 <code>Int</code>。一个可选的 <code>Int</code> 被写作 <code>Int?</code> 而不是 <code>Int</code>。问号暗示包含的值是可选类型，也就是说可能包含 <code>Int</code> 值也可能 <em>不包含值</em> 。（不能包含其他任何值比如 <code>Bool</code> 值或者 <code>String</code> 值。只能是 <code>Int</code> 或者什么都没有。）</p><h3 id="nil">nil</h3>
<p>你可以给可选变量赋值为 <code>nil</code> 来表示它没有值：</p><pre><code class="language-Swift">var serverResponseCode: Int? = 404
// serverResponseCode 包含一个可选的 Int 值 404
serverResponseCode = nil
// serverResponseCode 现在不包含值
</code></pre>
<blockquote>
<p>注意</p><p><code>nil</code> 不能用于非可选的常量和变量。如果你的代码中有常量或者变量需要处理值缺失的情况，请把它们声明成对应的可选类型。</p></blockquote>
<p>如果你声明一个可选变量但是没有赋值，它们会自动被设置为 <code>nil</code>：</p><pre><code class="language-swift">var surveyAnswer: String?
// surveyAnswer 被自动设置为 nil
</code></pre>
<blockquote>
<p>注意</p><p>Swift 的 <code>nil</code> 和 Objective-C 中的 <code>nil</code> 并不一样。在 Objective-C 中，<code>nil</code> 是一个指向不存在对象的指针。在 Swift 中，<code>nil</code> 不是指针——它是一个确定的值，用来表示值缺失。任何类型的可选状态都可以被设置为 <code>nil</code>，不只是对象类型。</p></blockquote>
<h3 id="if-语句以及强制解析">if 语句以及强制解析</h3>
<p>你可以使用 <code>if</code> 语句和 <code>nil</code> 比较来判断一个可选值是否包含值。你可以使用“相等”(<code>==</code>)或“不等”(<code>!=</code>)来执行比较。</p><p>如果可选类型有值，它将不等于 <code>nil</code>：</p><pre><code class="language-swift">if convertedNumber != nil {
    print(&quot;convertedNumber contains some integer value.&quot;)
}
// 输出“convertedNumber contains some integer value.”
</code></pre>
<p>当你确定可选类型确实包含值之后，你可以在可选的名字后面加一个感叹号（<code>!</code>）来获取值。这个惊叹号表示“我知道这个可选有值，请使用它。”这被称为可选值的 <em>强制解析（forced unwrapping）</em> ：</p><pre><code class="language-swift">if convertedNumber != nil {
    print(&quot;convertedNumber has an integer value of \(convertedNumber!).&quot;)
}
// 输出“convertedNumber has an integer value of 123.”
</code></pre>
<p>更多关于 <code>if</code> 语句的内容，请参考 <a href="https://gitbook.swiftgg.team/swift/swift-jiao-cheng/05_control_flow">控制流</a>。</p><blockquote>
<p>注意</p><p>使用 <code>!</code> 来获取一个不存在的可选值会导致运行时错误。使用 <code>!</code> 来强制解析值之前，一定要确定可选包含一个非 <code>nil</code> 的值。</p></blockquote>

            ]]>
        </content>
    </entry>
    <entry>
        <title>AI目前的影响</title>
        <author>
            <name>scooorpion</name>
        </author>
        <link href="https://scooorpion.github.io/aimu-qian-de-ying-xiang.html"/>
        <id>https://scooorpion.github.io/aimu-qian-de-ying-xiang.html</id>
            <category term="Thought"/>

        <updated>2024-06-28T00:57:00+08:00</updated>
            <summary>
                <![CDATA[
                    <p>其实信息时代$AI$最大的好处就是可以免除信息茧房，减少算法的影响，不会被广告，不实信息，等诸多因素干扰。</p>
<p>目前的所有搜索习惯，以及聊天，无论是学业上的，英语口语，甚至是生病吃什么药，都完全离不开大模型的帮助。以至于我不需要再使用搜索引擎，直接与AI语音对话，效率是最高的。</p>

                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>其实信息时代$AI$最大的好处就是可以免除信息茧房，减少算法的影响，不会被广告，不实信息，等诸多因素干扰。</p>
<p>目前的所有搜索习惯，以及聊天，无论是学业上的，英语口语，甚至是生病吃什么药，都完全离不开大模型的帮助。以至于我不需要再使用搜索引擎，直接与AI语音对话，效率是最高的。</p>

<p>$ChatGPT$ 甚至可以通过我画的图例理解我的问题，豆包可以直接通过我的highlight来搜索，这两个实实在在的大幅提升了我的效率，而且不会收不良因素干扰。</p>
<p>以前$AI$是辅助品，现在搜索引擎反而成为替代品了。</p>
<p>是的，我一直认为目前以$LLM$的能力，最大的作用就是替代搜索引擎，因为其有强大的信息整合结合能力。</p>
<p>至于绘图，什么其它的内容，只是锦上添花罢了，实操起来其实并非效率有人工高。</p>
<p> </p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>The microscopic expression of pressure</title>
        <author>
            <name>scooorpion</name>
        </author>
        <link href="https://scooorpion.github.io/pressure.html"/>
        <id>https://scooorpion.github.io/pressure.html</id>
        <media:content url="https://scooorpion.github.io/media/posts/17/jj-ying-WmnsGyaFnCQ-unsplash.jpg" medium="image" />
            <category term="Physics"/>

        <updated>2024-06-23T10:31:30+08:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://scooorpion.github.io/media/posts/17/jj-ying-WmnsGyaFnCQ-unsplash.jpg" alt="" />
                    1. 引言 我们将推导气体压强的微观表达式，通过分子动理论来解释单个分子如何产生宏观压强，并引出玻尔兹曼常数&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://scooorpion.github.io/media/posts/17/jj-ying-WmnsGyaFnCQ-unsplash.jpg" class="type:primaryImage" alt="" /></p>
                <h4 id="1-引言">1. 引言</h4>
<p>我们将推导气体压强的微观表达式，通过分子动理论来解释单个分子如何产生宏观压强，并引出玻尔兹曼常数 $ k_B $的意义和作用。</p><h4 id="2-压强的微观定义">2. 压强的微观定义</h4>
<p>压强$ P $是气体分子对单位面积容器壁施加的平均力：
$$ P = \frac{F}{A} $$
其中 $F$ 是分子施加在容器壁上的总力， $A$ 是容器壁的面积。</p><h4 id="3-单个分子对容器壁的冲量">3. 单个分子对容器壁的冲量</h4>
<p>假设气体分子的质量为 $ m $，速度为 $ v $。一个分子沿着 $ x $ 方向撞击容器壁，并发生弹性碰撞，速度变为 $ -v_x $。碰撞前后的速度变化为：
$$ \Delta v_x = v_x - (-v_x) = 2v_x $$
力的变化等于动量的变化率，根据冲量定理：
$$ \Delta p_x = 2mv_x $$</p><h4 id="4-单个分子对容器壁的力">4. 单个分子对容器壁的力</h4>
<p>考虑在时间 $ t $ 内，一个分子撞击容器壁的次数。若容器的长度为 $ L $，那么一个分子从一壁到另一壁并返回所需时间为：
$$ \Delta t = \frac{2L}{v_x} $$
在时间 $ t $ 内，撞击次数为：
$$ n = \frac{t}{\Delta t} = \frac{t v_x}{2L} $$
每次碰撞产生的力为：
$$ F_x = \frac{\Delta p_x}{\Delta t} = \frac{2mv_x}{\frac{2L}{v_x}} = \frac{mv_x^2}{L} $$</p><h4 id="5-总力和压强">5. 总力和压强</h4>
<p>对于 $ N $ 个分子，由于分子运动是随机的，均匀分布在三个方向（$ x $、$ y $、$ z $）。在立方体容器中，三维运动的平均速度平方 $ \langle v^2 \rangle $ 在每个方向的分量为：
$$ \langle v_x^2 \rangle = \langle v_y^2 \rangle = \langle v_z^2 \rangle = \frac{\langle v^2 \rangle}{3} $$
总力为：
$$ F = N \cdot \frac{mv_x^2}{L} = N \cdot \frac{m \cdot \frac{\langle v^2 \rangle}{3}}{L} = \frac{N m \langle v^2 \rangle}{3L} $$
压强 $ P $ 为：
$$ P = \frac{F}{A} = \frac{F}{L^2} = \frac{N m \langle v^2 \rangle}{3L^3} $$</p><h4 id="6-体积与温度的关系">6. 体积与温度的关系</h4>
<p>由于 $ L^3 = V $（容器的体积），压强变为：
$$ P = \frac{N m \langle v^2 \rangle}{3V} $$
进一步，用理想气体状态方程 $ PV = Nk_B T $（其中 $ k_B $ 是玻尔兹曼常数， $ T $ 是温度），我们可以联系温度和分子的平均动能：
$$ \frac{N m \langle v^2 \rangle}{3V} = \frac{Nk_B T}{V} $$
$$ \frac{m \langle v^2 \rangle}{3} = k_B T $$
由此，我们得出分子的平均动能与温度的关系：
$$ \frac{1}{2} m \langle v^2 \rangle = \frac{3}{2} k_B T $$
这是分子动理论的基本结果，表示了气体分子的平均动能和温度之间的关系。</p><h3 id="玻尔兹曼常数--k_b--的解释">玻尔兹曼常数 $ k_B $ 的解释</h3>
<h4 id="1-玻尔兹曼常数的定义">1. 玻尔兹曼常数的定义</h4>
<p>玻尔兹曼常数 $ k_B $ 是一个基本物理常数，连接了微观的分子运动与宏观的热力学性质。其值约为：
$$ k_B \approx 1.380649 \times 10^{-23} , \text{J/K} $$</p><h4 id="2-玻尔兹曼常数的作用">2. 玻尔兹曼常数的作用</h4>
<ul>
<li><strong>微观与宏观的桥梁</strong>：玻尔兹曼常数将单个分子或原子的能量尺度与宏观的温度尺度联系起来。</li>
<li><strong>理想气体状态方程</strong>：在理想气体状态方程中，玻尔兹曼常数用于描述气体分子平均动能和温度的关系：
$$ PV = Nk_B T $$</li>
<li><strong>气体分子的平均动能</strong>：单个气体分子的平均动能与温度的关系为：
$$ \langle E_k \rangle = \frac{3}{2} k_B T $$</li>
<li><strong>熵的统计定义</strong>：玻尔兹曼常数也出现在熵的统计定义中：
$$ S = k_B \ln \Omega $$</li>
</ul>
<h4 id="3-理想气体常数--r--与玻尔兹曼常数的关系">3. 理想气体常数 $ R $ 与玻尔兹曼常数的关系</h4>
<p>理想气体常数 $ R $ 与玻尔兹曼常数 $ k_B $ 通过阿伏伽德罗常数 $ N_A $ 连接：
$$ R = N_A k_B $$
其中 $ N_A $ 是阿伏伽德罗常数，约为：
$$ N_A \approx 6.022 \times 10^{23} , \text{mol}^{-1} $$</p><p>通过分子动理论，我们推导了气体压强的微观表达式，并解释了玻尔兹曼常数在这一过程中扮演的重要角色。玻尔兹曼常数 $ k_B $ 是将微观粒子的运动行为与宏观热力学性质（如温度和压强）联系起来的桥梁，是统计力学和热力学中不可或缺的常数。</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>历史</title>
        <author>
            <name>scooorpion</name>
        </author>
        <link href="https://scooorpion.github.io/li-shi.html"/>
        <id>https://scooorpion.github.io/li-shi.html</id>
        <media:content url="https://scooorpion.github.io/media/posts/15/camille-brodard-AVi4lkHl5L4-unsplash.jpg" medium="image" />
            <category term="Thought"/>

        <updated>2024-06-16T23:50:50+08:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://scooorpion.github.io/media/posts/15/camille-brodard-AVi4lkHl5L4-unsplash.jpg" alt="" />
                    历史是隐形的 中国上下五千年的历史文化，积累的哲学，科学，人文。已经可以对待任何事情，任何事物。而世界上一切冲突的本质其实都是人的私利，生死，社会达尔文主义说明了这一点。我们的祖先早已看透了人性，看透了一切事物的本源。而西方只能在基本事实和表面上看待问题 这就是东西方的最大差别，也是东方相较于西方的最大优势。
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://scooorpion.github.io/media/posts/15/camille-brodard-AVi4lkHl5L4-unsplash.jpg" class="type:primaryImage" alt="" /></p>
                
  <p>
    <br>历史是隐形的<br><br>中国上下五千年的历史文化，积累的哲学，科学，人文。已经可以对待任何事情，任何事物。而世界上一切冲突的本质其实都是人的私利，生死，社会达尔文主义说明了这一点。我们的祖先早已看透了人性，看透了一切事物的本源。而西方只能在基本事实和表面上看待问题
  </p>

  <p>
    这就是东西方的最大差别，也是东方相较于西方的最大优势。
  </p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Dora-ERC404 概述</title>
        <author>
            <name>scooorpion</name>
        </author>
        <link href="https://scooorpion.github.io/dora-erc404-gai-shu.html"/>
        <id>https://scooorpion.github.io/dora-erc404-gai-shu.html</id>
        <media:content url="https://scooorpion.github.io/media/posts/9/xavier-von-erlach-d-3jJUO74Go-unsplash.jpg" medium="image" />
            <category term="Blockchain"/>

        <updated>2024-06-02T15:58:33+08:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://scooorpion.github.io/media/posts/9/xavier-von-erlach-d-3jJUO74Go-unsplash.jpg" alt="" />
                    Dora-ERC404是一种基于以太坊区块链的代币标准，它在功能和特性上融合了以往的代币标准，如ERC-20和ERC- 721。在区块链世界里，不同类型的代币标准经常因其设计目的不同而有所区别。ERC-20是最为广泛认可的代币标准 之一，它被用来创建和发行可替代的数字货币和其他资产，这些代币是"同质化的"，意味着每个代币都是等价的并可&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://scooorpion.github.io/media/posts/9/xavier-von-erlach-d-3jJUO74Go-unsplash.jpg" class="type:primaryImage" alt="" /></p>
                <div class="page" title="Page 1">
<div class="section">
<div class="section">
<div class="layoutArea">
<div class="column"> </div>
</div>
<div class="layoutArea">
<div class="column">
<p>Dora-ERC404是一种基于以太坊区块链的代币标准，它在功能和特性上融合了以往的代币标准，如ERC-20和ERC- 721。在区块链世界里，不同类型的代币标准经常因其设计目的不同而有所区别。ERC-20是最为广泛认可的代币标准 之一，它被用来创建和发行可替代的数字货币和其他资产，这些代币是"同质化的"，意味着每个代币都是等价的并可 以相互替换。然而，ERC-721代币标准引入了"非同质化代币"(NFTs)的概念，每个ERC-721代币都是独一无二的， 不可分割，代表了区块链上的独特资产。</p>
<p>Dora-ERC404应运而生，试图弥合ERC-20和ERC-721之间的差异，创造一种既可以表现为同质化又可以表现为非同质 化的代币。简而言之，Dora-ERC404的代币既可以像ERC-20代币那样，作为货币或权利的等价物流通，也可以像ERC- 721代币那样，代表唯一的、可收集的数字资产。这种"半同质化"的代币，在特定的场景下根据需要转换其属性，提供 了一种灵活性和多样性，这在以往的代币标准中是不常见的。</p>
<p>不同于纯粹的ERC-20标准，Dora-ERC404允许代币在某些条件下是可替代的，在其他条件下保持唯一性。这种灵活的 设计使得它可以适应多种不同的用例，比如电子票务、游戏中的道具，或者任何需要跨越同质化和非同质化资产边界 的应用。此外，Dora-ERC404在智能合约的实施上也具有高度的灵活性和可定制性，使得开发者能够创造出符合自己 业务逻辑需求的代币系统。</p>
<p>Dora-ERC404与ERC-20和ERC-721相比，其独特之处不仅在于它的半同质性。在一些实现上，Dora-ERC404采用了更 加先进的编程模式和安全措施，目的是为了提高交易的效率以及减少网络的拥堵。Dora-ERC404代币的智能合约设计 有助于简化用户和开发者在管理和交易代币时的流程，同时还提供了足够的保护措施来确保资产安全。</p>
<p>在以太坊区块链上，Dora-ERC404代币由符合标准的智能合约管理，这些合约定义了代币的创建(铸造)，转移，销 毁(燃烧)等规则。通过这些操作，Dora-ERC404为用户提供了与传统ERC-20和ERC-721不同的体验，并在某些情况 下能够更好地满足市场需求。</p>
<p>Dora-ERC404的技术架构以其灵活性和多功能性著称，在以太坊网络中为代币的使用提供了新的可能性。在其核心， Dora-ERC404利用了智能合约的能力来实现其独特的操作和管理代币的方式。</p>
<p>智能合约是一种在区块链上运行的自动化脚本，它们在特定条件满足时自行执行预先编程的动作。Dora-ERC404的智 能合约编写遵循着严格的编程规范，确保合约代码的安全性、高效性以及透明性。此外，智能合约的不可变性保证了 一旦部署，其规则就不可篡改，从而确保了网络参与者之间的信任。</p>
<p>为了实现代币的半同质性，Dora-ERC404智能合约包含了一系列复杂的逻辑判断和条件语句。它们能够根据代币的当 前使用场景和持有者的需求，动态地调整代币的属性。比如，在特定的应用场景下，一个Dora-ERC404代币可以表现 为可替代的同质化代币，而在另一场景下，则表现为具有独特属性和不可替代性的非同质化代币(NFT)。</p>
<p>在执行交易时，Dora-ERC404智能合约会进行一系列的验证过程，以确定交易请求是否合法和有效。一旦验证通过， 合约会自动执行相应的代币转移或状态变更。这些操作包括代币的铸造、转移和销毁等。通过这种方式，Dora- ERC404确保了交易的可靠性和网络的安全性。</p>
<p>智能合约中还设有一系列的安全机制，如时间锁、权限控制和事件日志记录等功能，以应对潜在的安全威胁和提供交 易的全程透明度。Dora-ERC404标准强调安全性设计，通过代码审计和测试来降低智能合约的潜在漏洞和风险。</p>
<p>在以太坊网络中，Dora-ERC404代币的交易依赖于以太坊的底层技术，例如以太坊虚拟机(EVM)。EVM是一个全球 性的、强大的分布式计算环境，它使得智能合约得以在全球范围内被无障碍地执行。每当用户发起一个Dora-ERC404 代币的交易请求时，EVM会处理这些请求，执行智能合约中的代码，并将交易记录在区块链上。这一过程保证了交易 的不可篡改性和持久性。</p>
</div>
</div>
</div>
</div>
</div>
<div class="page" title="Page 2">
<div class="section">
<div class="section">
<div class="layoutArea">
<div class="column">
<p>Dora-ERC404智能合约还具备处理交易费用的能力。为了执行交易或调用智能合约中的某个函数，用户需支付一定量 的“gas”作为计算资源消耗的费用。这种费用结构保障了网络资源的合理分配，并防止了恶意用户滥用网络资源。</p>
<p>总之，Dora-ERC404通过其精心设计的智能合约架构，在以太坊网络中实现了代币操作的多样性和灵活性。它提供了 一种高效、安全且自动化的方式来处理复杂的代币交易，丰富了数字资产的表现形式，并有望在诸多应用场景中发挥 重要作用。</p>
<p>Dora-ERC404代币标准在数字资产领域中的独特之处在于其创新的"半同质性"特性。与传统的同质化代币(如ERC- 20)或完全非同质化的代币(如ERC-721)不同，Dora-ERC404设计了一种新型代币，可以根据需要和场景灵活地切 换其属性，兼具同质化和非同质化代币的特性。这种独特的设计为数字资产领域带来了以下几方面的创新和竞争力提 升。</p>
<p>首先，Dora-ERC404代币的可适应性极强。传统的同质化代币往往限于特定用途，如代表一种货币或积分，而非同质 化代币则通常与一件独一无二的资产挂钩，比如艺术品或收藏品。Dora-ERC404打破了这一局限，可以在必要时作为 一种货币使用，同时在其他情况下又可以代表具有独特属性的资产，使得它在各种商业模式和市场场景下都能发挥作 用。</p>
<p>其次，这种灵活性意味着Dora-ERC404可以实现资源的优化配置。在游戏或数字收藏品等行业，一个代币可能初期作 为一种同质化资源被广泛分发，但随着时间或特定成就的解锁，这个代币可以演变成一个具有特殊意义和价值的非同 质化代币。例如，游戏中的通用道具通过特定事件变成了独特的纪念品。Dora-ERC404使得这种转变得以无缝执行， 为用户创造了更深层次的参与感和价值。</p>
<p>第三，Dora-ERC404的设计还促进了新的经济模型和创收渠道的探索。由于这种代币可以在不同属性间转换，它开启 了如动态定价、时间敏感奖励、特定事件触发奖励等多种经济激励模型的可能性。这对于创造粘性用户体验、鼓励用 户深度参与和开辟新的收益来源尤为重要。</p>
<p>此外，Dora-ERC404在保障用户资产安全方面也做出了创新。由于它结合了同质化和非同质化代币的特点，智能合约 中固有的安全机制能够有效抵御多种攻击手段，比如双重花费或合约漏洞。这一点对于增强用户的信任和推广代币使 用至关重要。</p>
<p>Dora-ERC404还有助于减少区块链网络的拥堵。在以太坊等区块链网络上，交易费用(gas费)往往与网络的拥挤程度 挂钩。通过将多个功能融合到一个代币标凈中，Dora-ERC404减少了对多个智能合约的需求，从而降低了每个交易所 需要的gas费，增强了网络效率，并对用户是一种节省成本的优势。</p>
<p>最后，随着区块链和加密资产被越来越多的主流用户所接受，Dora-ERC404的"半同质性"特性可能成为连接加密世界 和传统金融世界的桥梁。通过将传统资产如房产、艺术品等代表为在特定情况下可以被分割和共有的代币，Dora- ERC404为资产的分割所有权和流动性提供了新的解决方案。</p>
<p>综上所述，Dora-ERC404通过其创新的代币标准，为数字资产领域提供了更多样化的使用场景和经济互动模式，增加 了代币的可用性和流动性，同时提高了网络的运行效率和用户资产的安全性。这些特点使得Dora-ERC404具备了在数 字资产领域中的竞争优势，并为未来的市场发展提供了广阔的可能性。</p>
<p>Dora-ERC404的历史发展可追溯至数字资产和区块链行业对代币多样性和可塑性需求的增长。在早期的区块链发展阶 段，市场上主导的是同质化代币标准，如ERC-20，它极大地促进了加密货币的流通与交换。然而，随着区块链技术的 不断成熟及应用场景的扩展，市场开始出现对非同质化代币的需求，特别是在艺术品、游戏内物品及其他独一无二资 产的代表上。这一需求催生了如ERC-721这样的非同质化代币标准。然而，单一的同质化或非同质化代币标准难以满 足市场对于更复杂、更灵活资产表示方式的需求。正是在这样的背景下，Dora-ERC404代币标准诞生了。</p>
</div>
</div>
</div>
</div>
</div>
<div class="page" title="Page 3">
<div class="section">
<div class="section">
<div class="layoutArea">
<div class="column">
<p>Dora-ERC404的设计初衷是整合同质化代币和非同质化代币的特点，为市场提供一种新的代币类型—半同质化代币。 这种代币能够根据特定条件或用户需求，改变自身的属性，从而实现同质化与非同质化的无缝过渡。在Dora-ERC404 出现之前，并没有一种代币能同时拥有这两种属性，这使得Dora-ERC404一经推出，便在行业内引起了广泛关注和讨 论。</p>
<p>Dora-ERC404标准的提出时间并不确定，但它作为概念的提出很可能是在ERC-721标准获得广泛认可之后，这一时期 区块链技术正在经历快速的创新和多样化发展。Dora-ERC404的早期版本在技术社区内部进行了小范围的讨论和迭 代，通过开发者和技术贡献者的共同努力，该标准逐渐成型并被更广泛地认识和接受。</p>
<p>尽管Dora-ERC404是基于社区共识和开放贡献的，但它的发展历程并非没有挑战。作为一项创新的尝试，Dora-ERC404 在被社区接受的过程中，需要克服技术实现的复杂性、潜在的安全性问题以及如何与现有区块链基础设施和标准融合 的障碍。但由于其所提供的独特价值和解决的实际问题，该标准逐渐获得了开发者社区和早期项目采纳者的支持。</p>
<p>随着时间的推移，Dora-ERC404在实际应用场景中展示了其潜力。从艺术品的数字化、游戏中虚拟物品的交易，到复 杂金融产品的代表，Dora-ERC404标准都显示出了其独特的灵活性和效用。尤其是在艺术和娱乐领域，Dora-ERC404使 得数字资产的所有权和转移变得更加丰富和有意义。对于艺术创作者、收藏家以及游戏玩家来说，Dora-ERC404提供 了一种全新的方式来创建、持有和交易他们的数字资产。</p>
<p>Dora-ERC404的发展也证明了开放式创新和社区驱动发展模式在区块链技术进步中的重要作用。通过持续的技术改进 和优化，Dora-ERC404不仅在早期的区块链爱好者和技术人员之间获得了一致好评，也开始受到更广泛的市场和主流 投资者的关注。随着数字资产领域的迅猛发展和更多行业的加入，Dora-ERC404将继续发挥其在促进资产代表性、可 交换性和创新性方面的作用。</p>
<p>以太坊(Ethereum)，作为一个开源的区块链平台，为去中心化应用(DApps)提供了运行环境。它的创新在于引入 了智能合约(Smart Contracts)的概念，这些自动执行的代码片段使得在无需第三方中介的情况下，用户可以创建复杂 的去中心化和自动化的应用。以太坊的网络架构和支持的智能合约模型，为包括Dora-ERC404在内的各种代币标准的 实现和运行提供了必要的基础设施。</p>
<p>以太坊网络是建立在一系列互联互通的节点上，每个节点都保存着整个以太坊区块链的复制版本。区块链是一种分布 式数据库，以连锁的区块形式存储数据，其中包含了一系列交易记录。新的交易或智能合约的操作被打包进新的区块 中，而创建新区块的过程称为挖矿。矿工通过解决复杂的密码学问题来竞争新区块的创建权，成功的矿工将新区块加 入区块链，并由网络达成共识，最终确认新区块的有效性。</p>
<p>以太坊网络内的每个动作，无论是普通交易还是智能合约的执行，都需要消耗一定量的“Gas”。Gas是对执行操作所需 计算资源的量度，通过以太坊的本地货币——ETH来支付。Gas费用旨在防止网络过载，并激励矿工验证和执行交易。</p>
<p>智能合约是以太坊区块链上的一段自执行的代码，它定义了合约的参与方之间的规则和协议。一旦智能合约被部署到 区块链上，就会自动执行，而且无法更改或删除，这保证了操作的不可逆性和透明性。以太坊上的智能合约使用 Solidity或Vyper等专用编程语言编写，智能合约的每一个功能都可以通过网络发出的交易来触发。</p>
<p>代币标准，例如Dora-ERC404，就是在智能合约的框架下定义的。这些标准规定了代币的创建、管理和交易等功能， 并确保它们与以太坊网络上的其他合约和服务兼容。ERC-20作为同质化代币的标准模型，为诸多加密货币和数字资产 提供了一种简单有效的表示形式。ERC-721标准则为非同质化代币(NFTs)奠定了基础，使得能够以区块链上唯一、 不可互换的方式表示资产。Dora-ERC404作为一种更进一步的尝试，它融合了ERC-20和ERC-721的特性，旨在创建半 同质化代币，这些代币可以根据特定的条件从同质化与非同质化之间转换。</p>
<p>Dora-ERC404标准的实现依赖于以太坊智能合约的灵活性。通过智能合约，Dora-ERC404代币的属性可以被设定为在满 足特定条件时发生转变。例如，一个ERC404代币可以作为活动票务系统中的入场券，在活动开始前作为同质化代币进 行交易，而活动一旦开始，每一张入场券则拥有独特的座位信息，成为非同质化代币。</p>
</div>
</div>
</div>
</div>
</div>
<div class="page" title="Page 4">
<div class="section">
<div class="section">
<div class="layoutArea">
<div class="column">
<p>以太坊不仅支持代币标准的运行，其去中心化特性和智能合约的复杂度还使得它能够承载各类去中心化金融(DeFi) 应用、游戏、艺术品拍卖等多种基于区块链的服务。这些应用案例凸显了以太坊网络的强大能力，同时也推动了诸如 Dora-ERC404这样新型代币标准的创新和发展。</p>
<p>以太坊正在经历不断的迭代和升级，以提高网络的可扩展性、安全性和性能。例如，以太坊2.0的升级旨在引入权益证 明(Proof of Stake，PoS)共识机制，以减少能源消耗并提高交易速度。这样的升级将为ERC404等新兴代币标准提供 更稳定、更高效的运行环境。</p>
<p>总体而言，以太坊平台提供了一个强大且多样化的生态系统，使得包括Dora-ERC404在内的多种代币标准得以发展。 随着技术的进步和社区的共同努力，我们可以期待在以太坊网络上出现更多具有创新性和实用性的代币解决方案。</p>
<p>非同质化代币(NFT)是一种独特的数字资产，它在区块链技术中代表着不可替代和唯一性。NFT的核心特征在于， 每个代币都是独一无二的，拥有独特的标识符，无法与任何其他代币等量交换。这与加密货币和ERC-20类型的同质化 代币截然不同，后者的每个单位都是可互换的，拥有等同的价值和功能。</p>
<p>NFT的定义:</p>
<p>非同质化代币，或简称NFT，是建立在区块链技术之上的一种特殊代币类型。它们通常存储在智能合约中，并与数字 文件(例如艺术作品、音乐、视频或其他形式的创意内容)相联系。NFT的独特之处在于它们的不可交换性，这意味 着每个NFT都含有独特的信息和属性，确保了其独一无二的身份。</p>
<p>NFT的特点: 不可互换性(Non-Fungibility):NFT的核心属性是其不可互换性，每个代币都带有独特的属性和标识，使其与其他代</p>
<p>币不同。</p>
<p>真实性与稀缺性(Authenticity and Scarcity):NFT由于区块链技术的加持，其所有权和来源都是可验证的，保证了它 们的真实性和稀缺性。</p>
<p>所有权证明(Proof of Ownership):NFT的持有者拥有区块链上可验证的所有权证明，这使得NFT成为了一个强有力 的数字所有权工具。</p>
<p>永久性(Permanence):一旦NFT被铸造，其数据就会永久记录在区块链上。除非原始创建者设置了可变更的属性， 否则NFT的主要属性不可更改。</p>
<p>可编程性(Programmability):与智能合约一样，NFT可以进行编程，以实现复杂的交互和功能，例如增加版税机 制，使原创者每次转售时都能获得收益。</p>
<p>交互性(Interoperability):NFT可以在支持相同标准的不同区块链平台上使用和交易，例如ERC-721和ERC-1155是以 太坊上普遍使用的NFT标准。</p>
<p>NFT与ERC-20的主要区别: ERC-20代币是以太坊上最广为人知的一种代币标准，它定义了一种同质化的代币，意味着这类代币的每个单位都是相</p>
<p>同的，可互换的。这类代币经常用于代表货币、积分系统或其他需要大量同类型资产的场景。 与之对比，NFT(例如按照ERC-721或ERC-1155标准发行的代币)代表着独特的资产或权益，不能被简单分割或等量</p>
<p>交换。每个NFT都有独立的价值，通常与其独特性、稀缺性和相关数字资产的内容价值相关联。</p>
<p>NFT赋予了数字内容真实的所有权和证明，这在艺术品收藏、游戏资产、身份验证等领域带来了颠覆性的变化。在 ERC-20同质化代币中，所有的代币在功能和价值上是等同的，而NFT则打破了这一局限，让每个代币都能代表一个独 立且不可替代的实体或概念。</p>
</div>
</div>
</div>
</div>
</div>
<div class="page" title="Page 5">
<div class="section">
<div class="section">
<div class="layoutArea">
<div class="column">
<p>Dora-ERC404的提出，是对传统NFT标准如ERC-721和ERC-1155的一种补充和扩展。在传统的NFT生态中，每个代币 都是唯一的，代表了一份不可分割的资产或权益。然而，Dora-ERC404引入了更加灵活的代币属性，使得NFT不再仅 仅是静态的、单一的资产表示。Dora-ERC404标准的推出，为NFT市场注入了新的活力，提高了NFT的应用范围和流 动性，并推动了NFT标准化的进程。</p>
<p>在Dora-ERC404的体系下，非同质化代币可以根据预设的条件或用户的需求，实现从非同质状态向同质状态的转换， 或相反。这种转换的可能，为NFT带来了前所未有的灵活性和动态性。在实际应用场景中，这意味着一种代币在特定 时间或条件下，可以充当通用货币或代表特定的权益和资产，从而扩展了NFT在游戏、艺术品、票务、会员权益等多 个领域中的应用。</p>
<p>通过Dora-ERC404，开发者能够设计出既可以作为收藏品交易，也可以用于特定功能的NFT。例如，在数字艺术领 域，一个代表艺术品的NFT可以在艺术品的所有权转移时，作为非同质化代币存在;而当艺术品被用于某个数字画廊 的订阅服务时，则可以转换为同质化的代幣。这种变化不仅简化了NFT的使用流程，也让数字资产的所有者能够灵活 地将其投入到不同的经济活动中。</p>
<p>Dora-ERC404的引入还带动了NFT的流动性和市场效率。传统NFT因其唯一性而难以实现快速的交易和流通。然而， 当NFT通过Dora-ERC404能在特定情景下转换为同质化代幣时，它们就可以更容易地在不同用户之间转移，增加了交 易的机会。这不仅促进了二级市场的繁荣，也为NFT持有者提供了更多变现的渠道。</p>
<p>此外，Dora-ERC404对NFT标准化的推动作用不可小觑。在它之前，NFT的标准化尚未形成统一的格局，ERC-721和 ERC-1155虽然被广泛接受，但在功能性和互操作性上仍然存在限制。Dora-ERC404的出现，为NFT的标准化提供了一 种全新的方向，强调了标准在适应不同场景下的重要性，为市场提供了一种更为灵活和通用的NFT定义。</p>
<p>在Dora-ERC404推动下的NFT标准化，不仅限于提升NFT的通用性和适用性，它还强调了智能合约的作用。通过在智 能合约中编写条件，Dora-ERC404可以实现复杂的逻辑操作，使得NFT不再是简单的所有权证明，而是可以执行具体 功能的动态资产。例如，一个NFT可以根据时间或其他触发条件自动转变其属性，或在满足特定条件后自动执行合约 内设定的行动，极大地增加了NFT的实用性和交互性。</p>
<p>在总体上，Dora-ERC404的出现，为NFT市场带来了新的机遇和挑战。它通过提供一种更为灵活和动态的代币标准， 推动了NFT从单一用途向多元化应用的转变，提升了NFT的流动性和市场参与度。这不仅仅是对NFT领域的一次技术 更新，更是对当前数字经济模式的一次重要革新。随着Dora-ERC404标准的不断发展和应用，我们可以预见一个更加 活跃和多元的NFT市场即将到来。</p>
<p>Dora-ERC404标准自推出以来，便以其灵活性和多功能性在众多应用场景中崭露头角。以下是Dora-ERC404在实际项目 中的一些应用案例，这些案例展示了该标准如何为用户和开发者开拓新机遇。</p>
<h4><strong>案例一:游戏行业的虚拟资产 </strong></h4>
<p>在游戏行业，Dora-ERC404标准被用来创造可以在游戏内部流通的虚拟物品和货币。传统的游戏物品往往是非同质化 的(NFT)，每个物品独一无二，不能互换。而Dora-ERC404允许这些游戏物品在必要时转化为同质化代币(FT)， 从而使它们能够在游戏的内部市场上自由交易，就如同游戏币一样。例如，在一款名为“幻境探险”的角色扮演游戏 中，玩家获得的独特装备可以在不战斗时转换为一种通用的游戏币，这种游戏币可以用来购买其他装备或者与其他玩 家交易。</p>
<h4>案例二:艺术品与版权管理</h4>
<p>Dora-ERC404为艺术家提供了一种创新的版权管理方式。艺术品可以以NFT的形式存在，以确保其独特性和版权归 属。同时，通过Dora-ERC404，艺术品可以授权给数字画廊或在线平台，期间这些NFT可以暂时转化为同质化代币， 允许用户按次访问或订阅。当艺术家需要展览或转售艺术品时，这些代币又可以轻松转换回NFT。这一模式不仅为艺 术家提供了新的展示和收入渠道，也让艺术爱好者更方便地接触到作品。</p>
</div>
</div>
</div>
</div>
</div>
<div class="page" title="Page 6">
<div class="section">
<div class="section">
<div class="layoutArea">
<div class="column">
<h4>案例三:会员权益与服务</h4>
<p>Dora-ERC404为会员权益管理带来了便利。在一个线上健身平台中，会员可购买包含训练课程和个人指导的会员卡， 这些会员卡作为NFT发行，代表了用户对服务的独家访问权。用户在不使用服务时，可以将这些NFT会员卡转换为同 质化的代币，将它们出售给其他用户，或者在平台上兑换其他服务。这一过程不仅使会员权益流通性大增，还极大地 增加了会员服务的灵活性。</p>
<h4>案例四:数字身份验证</h4>
<p>在数字身份和数据隐私方面，Dora-ERC404提供了一种新的解决方案。一家在线身份验证公司使用Dora-ERC404标准来 发行可验证的身份代币。用户通过验证程序获得这些NFT，它们代表着用户的身份和信用度。当用户需要在不同的服 务平台上验证身份时，这些NFT就可以转换成一次性的同质化验证代币，用于完成验证过程，之后再转换回非同质化 状态，确保用户隐私。</p>
<h4>案例五:票务系统</h4>
<p>在票务系统中，Dora-ERC404同样展现出巨大潜力。一家电影院链推出基于Dora-ERC404的电影票，这些票在初始阶段 作为NFT出售，每张票都有唯一的坐位信息和观影时间。在观影日之前，用户可以将这些电影票转换为通用的同质化 代币，通过这种方式，用户可以在电影院的生态系统内自由交换电影票，甚至可以用来购买店内的食品和商品。这种 灵活性极大地提升了用户体验，也简化了电影院的票务管理。</p>
<p>通过以上应用案例，我们可以看出Dora-ERC404标准的潜力和多样性。它不仅为现有的数字资产提供了新的操作模 式，也为开发者创造了新的机会，使他们能够设计出功能更全面、更能满足市场需求的产品。随着区块链技术的不断 发展，我们可以期待Dora-ERC404将在未来的数字经济中扮演更加重要的角色。</p>
<p>随着区块链技术的不断进步和数字资产市场的日渐成熟，Dora-ERC404标准的发展前景广阔。它的设计理念和技术实 现为未来的应用打下了坚实的基础，预计将在以下几个方面发挥重要作用:</p>
<pre>一、增强数字资产的流动性与互操作性
</pre>
<p>当前，区块链领域中的资产通常分为两类:同质化代币(FTs)和非同质化代币(NFTs)，各自具有不同的属性和适 用场景。然而，Dora-ERC404的推出，将二者的优势结合在一个框架之下，能够根据需要灵活转换代币类型，从而极 大增加了资产的流动性。在不久的将来，Dora-ERC404标准有望成为一种通用的数字资产桥梁，使得不同类型资产间 的交易和利用更加便捷，推动整个区块链生态系统的互操作性和协同工作。</p>
<pre>二、多样化的金融产品创新
</pre>
<p>金融行业对区块链技术的兴趣日益浓厚，众多金融机构正在寻求利用区块链创建新型的金融产品。由于Dora-ERC404 能够在同质与非同质之间自如转换，未来的金融产品将可能出现全新的设计，如将债权、股权或其他金融工具设计为 既可以像股票或货币一样流通，同时又能保留特定权益的凭证。这将引发金融创新的新浪潮，进而激活资本市场，带 动新的经济增长点。</p>
<pre>三、扩展游戏与娱乐产业的边界
</pre>
<p>在游戏和娱乐行业，NFT已经开始发挥作用，玩家能够收集和交易虚拟物品。Dora-ERC404标准为游戏内资产的流通 提供了新的可能，不仅能提高玩家对于游戏内资产的控制，还能推动虚拟资产外部市场的形成。在未来，可以预见到 更多基于Dora-ERC404的游戏和娱乐平台出现，它们将利用这一标准带来的灵活性和便利性，构建跨游戏的经济系统 和玩家社区。</p>
<pre>四、促进数字艺术及版权管理的革新
</pre>
</div>
</div>
</div>
</div>
</div>
<div class="page" title="Page 7">
<div class="section">
<div class="section">
<div class="layoutArea">
<div class="column">
<p>Dora-ERC404标准对于艺术界特别是数字艺术市场的影响不容忽视。它为艺术家提供了新的方式来确保作品的原创 性，同时也为作品的销售和展示提供了更多元化的途径。数字艺术品可以通过Dora-ERC404实现从独一无二的作品到 可供多人欣赏或使用的商品之间的无缝转换，大幅提升了艺术品的市场接受度和流通性。</p>
<pre>五、激发去中心化身份认证和数据隐私的新模式
</pre>
<p>去中心化身份认证是未来数字经济中的关键一环。Dora-ERC404标准在身份验证和个人数据隐私方面有着巨大的应用 潜力，它能够使得用户的身份证明在需要时转换为同质化代币，简化身份验证流程，增强用户隐私保护，推动构建信 任的去中心化网络。</p>
<pre>六、推动票务和认证系统的转型
</pre>
<p>Dora-ERC404标准有望在票务和证书领域引发变革。票券作为NFT发行时具有独特性和不可替代性，但转化为同质化 代币后，可以在更大范围内流通和交易。从活动门票到学历证书，未来各种形式的证明都可以通过Dora-ERC404实现 更高效的发行、管理和转移，大大提高系统效率和用户便利性。</p>
<p>随着区块链技术的演进和普及，预期Dora-ERC404标准将在数字经济中扮演越发重要的角色。不断的探索和应用将使 其成为未来数字资产与区块链行业发展的一个关键推动因素。</p>
<p>在深入分析了Dora-ERC404标准及其特性后，我们可以清晰地认识到它在以太坊和NFT领域中的独特价值和重要性。 Dora-ERC404不仅创造了一种新的数字资产类型，它的出现也是对现有资产类别的一次重大扩展，这在以太坊区块链 上是前所未有的。</p>
<p>Dora-ERC404的核心创新是将同质化代币(FTs)和非同质化代币(NFTs)的属性融合于一体，这一点是以前代币标准 所不具备的。通过实现两者之间的自由转换，它极大地提高了资产的流动性，并且拓宽了代币的适用场景。对于那些 需要在不同状态下转换其属性的资产，Dora-ERC404提供了理想的解决方案。</p>
<p>在以太坊网络上，Dora-ERC404借助智能合约的强大功能，确保了在转换过程中代币安全性和独特性的维持。这对于 那些希望通过区块链技术提升其业务效率和安全性的组织来说，无疑是一个吸引人的优点。Dora-ERC404通过创新的 技术实现，提供了一种更加灵活、可靠的数字资产管理方式。</p>
<p>此外，Dora-ERC404对于金融产品创新而言也具有巨大潜力。它开辟了设计新型金融工具和服务的可能性，使得从资 产证券化到复杂的衍生品设计，都可以在此基础上进行开发。这为金融机构和创新者提供了一个能够实现资本和资源 更有效配置的平台。</p>
<p>游戏和娱乐产业也是Dora-ERC404重要的应用领域。在这一领域中，代币需要具备易于交易和转移的特性。Dora- ERC404标准所带来的资产流通性和互操作性，能够推动游戏内外部市场的形成和发展，助力构建更为广泛的虚拟经济 体系。</p>
<p>在数字艺术领域，Dora-ERC404则显得尤为重要。它不仅保护了艺术家的版权，还为作品的传播和销售提供了新的途 径。艺术家和创作者能够通过这一标准更好地控制作品的分发，并且通过资产的多样化能够触达更广泛的受众。</p>
<p>Dora-ERC404还促进了身份验证和数据隐私保护领域的进步。在去中心化身份验证方面，Dora-ERC404提供了一种安全 可靠的方式，使得个人信息在必要时能够被验证，同时保持用户隐私的保护。</p>
<p>最后，Dora-ERC404在票务和认证系统中也展现了其转型潜力。从体育赛事门票到专业资格证书，Dora-ERC404都为这 些场景提供了更为高效的处理和流转方式。</p>
<p>综上所述，Dora-ERC404不仅为数字资产的定义和流转提供了新的视角，而且通过它的多功能性、灵活性，以及与以 太坊网络的兼容性，为区块链行业带来了实质性的创新。随着区块链技术的持续进步和更广泛的应用，我们可以期待 Dora-ERC404在未来数字经济中将扮演更为关键和核心的角色，推动各行各业向前发展。</p>
</div>
</div>
</div>
</div>
</div>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Consequentialism</title>
        <author>
            <name>scooorpion</name>
        </author>
        <link href="https://scooorpion.github.io/jie-guo-zhu-yi-consequentialism.html"/>
        <id>https://scooorpion.github.io/jie-guo-zhu-yi-consequentialism.html</id>
        <media:content url="https://scooorpion.github.io/media/posts/8/GG_8D9WaQAAc992.jpeg" medium="image" />
            <category term="Thought"/>

        <updated>2024-06-02T15:48:52+08:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://scooorpion.github.io/media/posts/8/GG_8D9WaQAAc992.jpeg" alt="" />
                    “结果，对人生体验来说很重要。要提前设计好结果的概率区间，和丰富自己对结果的解读能力，尽量让事情的结果落在自己能接受的区间里面“。 乍看这个道理，可能会觉得与“人生在于体验、人生在于经历”等过程学派的观点相悖。其实不然。 如果我们把人生看成一件件“事情”的总和，那么很多时候，同样付出了时间和努力，因为结果的不同，当我们回忆起“过程”时，整个回忆的色彩是截然不同的。&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://scooorpion.github.io/media/posts/8/GG_8D9WaQAAc992.jpeg" class="type:primaryImage" alt="" /></p>
                
  <p>
    <b>“结果，对人生体验来说很重要。要提前设计好结果的概率区间，和丰富自己对结果的解读能力，尽量让事情的结果落在自己能接受的区间里面“。</b><br><br>乍看这个道理，可能会觉得与“人生在于体验、人生在于经历”等过程学派的观点相悖。其实不然。<br><br>如果我们把人生看成一件件“事情”的总和，<b>那么很多时候，同样付出了时间和努力，因为结果的不同，当我们回忆起“过程”时，整个回忆的色彩是截然不同的。<br></b><br>比如，同样花了一个月的时间准备一个dream company的面试。如果最终进了，那么，那段披星戴月的时间会成为自己“光辉岁月”故事集里浓墨重彩的一篇；要是没进，回忆的时候则会带上悲凉、徒劳的色彩，甚至想到那个公司都会有种排斥。<br><br>同样的一件事，因为结果的不同，在我们记忆中呈现的景象，可以完全不同。而我们的幸福感，常常来源于事后回忆时，自己给自己编造的“故事”。<br><br>如果能把自己的一生frame为一个个有意义的基调正面的人生故事的总合，无疑会极大的提高我们的幸福感。<br><br>而具体怎么engineer one's life story呢？回到开头说的<b>“提前设计好结果的概率区间，和丰富自己对结果的解读能力，尽量让事情的结果落在自己能接受的区间里面“。</b><br><br>比如，做一件事情的时候，可以把预期设到最低，这样不管最终结果如何，回头看都是“达到目标”的success story。同时，也可以明确地告诉自己，做这件事的意义就是去“学习”、“试错“，这样的话，就算最终失败，这个失败也是落在了你可以接受的结果区间内的—— 毕竟，失败也是一种finding。这样的话，不管成功或失败，你那永不停歇的storytelling brain永远都能自圆其说，给你编一个积极的故事。<br><br>需知道，我们不是不能承受失败，而是哪怕失败、也得有策略的“失败”，不能累积无意义的挫败感，否则失败的阴影留在记忆中，一定会在未来继续它的负面影响。有技巧的设计和解读人生的“结果”，可以让所有的经历回头看都被自己的大脑定义为值得的、享受的、成功的。这种正面的“意义感“所带来的反馈则会引发正向的循环。<br><br>人的自我是很脆弱的。要在漫长的人生中保持相对积极的状态，需要有这种与自己“斡旋”的智慧。
  </p>

  <p>
    ——转自Iris Pan
  </p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>短视频与碎片化信息</title>
        <author>
            <name>scooorpion</name>
        </author>
        <link href="https://scooorpion.github.io/duan-shi-pin-yu-sui-pian-hua-xin-xi.html"/>
        <id>https://scooorpion.github.io/duan-shi-pin-yu-sui-pian-hua-xin-xi.html</id>
        <media:content url="https://scooorpion.github.io/media/posts/7/pejman-nikram-CdiffyTRtF0-unsplash.jpg" medium="image" />
            <category term="Thought"/>

        <updated>2024-06-02T10:41:43+08:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://scooorpion.github.io/media/posts/7/pejman-nikram-CdiffyTRtF0-unsplash.jpg" alt="" />
                    因为我有明显的智能手机成瘾症状，所以一直很关注这块，其中最喜欢Cal Newport的很多观点。他是计算机科学的博士后，个人完全不用任何社交网，写过两本提升专注力的书：Deep Work跟Digital&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://scooorpion.github.io/media/posts/7/pejman-nikram-CdiffyTRtF0-unsplash.jpg" class="type:primaryImage" alt="" /></p>
                
  <p>
    因为我有明显的智能手机成瘾症状，所以一直很关注这块，其中最喜欢Cal Newport的很多观点。他是计算机科学的博士后，个人完全不用任何社交网，写过两本提升专注力的书：Deep Work跟Digital Minimalism。<br><br>关于个人接受信息过载以及现代人必须维持足够资讯的矛盾，Cal给出的建议很值得参考：按个人需求，<b>付费订阅优质的信息源，包括不限于杂志、报刊、付费订阅博客、Newsletters</b>等。<br><br>免费互联网的基础，是拿用户当产品，用户贡献出自己的注意力，使用免费的互联网产品，互联网公司收集用户的信息（data)以及注意力（attention）盈利。互联网公司会使用各种办法，利用各种产品功能，留住用户（hooked)，增加用户使用产品的时间，不介意且乐意用户有成瘾倾向。<br><br>凡是付费，即必须满足精品挑选，付费购买服务，提供方要让消费者满足，持续提升服务质量，否则消费者会取消订阅，更换其它的选择。<br><br>不是说免费的资讯都差，其中不乏优秀、深刻的好内容，但噪音太大，挑选的成本太高。肯定比不上付费内容的产出，节省挑选成本，基于用户的付费，能吸引更多优质的作者，能持续产出更优秀的内容。<br><br>中文书，受出版环境的限制，给人一种错觉，仿佛短视频讨论的东西书籍提供的信息辐射不到。其实在出版环境成熟的地方，短视频、社交网唯一的优势只是早、快、传播广，从获取信息的角度，读书&gt;杂志报纸&gt;碎片阅读。<br><br>这个时代，已经不存在「纯看书」这一选择了。书，是从短视频、社交网碎片信息中经过筛选的胜方，热门的短视频、社交网碎片内容主题，由专业优秀的作者著述参与讨论，看书也是参与短视频热门话题的讨论，只是形式有区别，内容的提供者不同而已。<br><br>书并不比短视频、社交网碎片内容高一级，有主题的短视频作者都会出书，优秀的社交网作者也会写书，对比书跟他们在免费平台的创作，书胜在主题更聚焦，表达更深邃，是精炼打磨的信息，是浓缩。<br><br>社会运行的规律以及现代人真正需要的讯息，本就不通过短视频、社交网上传播的。我们接受的高等教育，赋予我们钥匙，能打开那些有门槛但却能启迪我们人生的知识财富，它们往往都是由书籍传播的。至于短视频跟碎片化信息，那只是热闹，是娱乐。<br><br>不极端，经常反思，提醒自己注意精力分配，每日大概看多少时间的碎片信息，每日投入多少时间阅读感兴趣的书籍，这样斟酌分配下自己的时间精力，就能克服短视频、碎片信息给人无尽头的消耗疲倦。<br><br>咱们这边过度沉迷短视频、碎片化信息的一大原因，是缺乏严肃、精炼的付费订阅内容选择，报刊杂志的没落，书籍出版的环境缺失（书号难求），也颇让人无奈。<br><br>上一辈人不看电视，只看报纸、读书，会跟世界脱节吗。
  </p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Photos Gallery </title>
        <author>
            <name>scooorpion</name>
        </author>
        <link href="https://scooorpion.github.io/photos-gallery.html"/>
        <id>https://scooorpion.github.io/photos-gallery.html</id>

        <updated>2024-06-01T23:51:48+08:00</updated>
            <summary></summary>
        <content type="html">
            <![CDATA[
                
  <div  class="gallery-wrapper gallery-wrapper--full">
    <div class="gallery" data-columns="3">
      <figure class="gallery__item">
      <a href="https://scooorpion.github.io/media/posts/5/gallery/vlad-calin-BZVRSzJwbtE-unsplash.jpg" data-size="6000x4000">
        <img loading="lazy" src="https://scooorpion.github.io/media/posts/5/gallery/vlad-calin-BZVRSzJwbtE-unsplash-thumbnail.webp" height="512" width="768" alt="" >
      </a>
      
    </figure><figure class="gallery__item">
      <a href="https://scooorpion.github.io/media/posts/5/gallery/jeremy-bishop-rqWoB4LFgmc-unsplash.jpg" data-size="3648x5472">
        <img loading="lazy" src="https://scooorpion.github.io/media/posts/5/gallery/jeremy-bishop-rqWoB4LFgmc-unsplash-thumbnail.webp" height="1152" width="768" alt="" >
      </a>
      
    </figure><figure class="gallery__item">
      <a href="https://scooorpion.github.io/media/posts/5/gallery/gabriel.jpg" data-size="5184x3456">
        <img loading="lazy" src="https://scooorpion.github.io/media/posts/5/gallery/gabriel-thumbnail.webp" height="512" width="768" alt="" >
      </a>
      
    </figure><figure class="gallery__item">
      <a href="https://scooorpion.github.io/media/posts/5/gallery/fabrizio-coco-KhdsOUi5zuU-unsplash.jpg" data-size="6000x4000">
        <img loading="lazy" src="https://scooorpion.github.io/media/posts/5/gallery/fabrizio-coco-KhdsOUi5zuU-unsplash-thumbnail.webp" height="512" width="768" alt="" >
      </a>
      
    </figure><figure class="gallery__item">
      <a href="https://scooorpion.github.io/media/posts/5/gallery/kent-henderson-5yOefHJEaGw-unsplash.jpg" data-size="2048x1365">
        <img loading="lazy" src="https://scooorpion.github.io/media/posts/5/gallery/kent-henderson-5yOefHJEaGw-unsplash-thumbnail.webp" height="512" width="768" alt="" >
      </a>
      
    </figure>
    </div>
  </div>

  <div  class="gallery-wrapper gallery-wrapper--full">
    <div class="gallery" data-columns="3">
      <figure class="gallery__item">
      <a href="https://scooorpion.github.io/media/posts/5/gallery/569317614.jpg" data-size="8256x5504">
        <img loading="lazy" src="https://scooorpion.github.io/media/posts/5/gallery/569317614-thumbnail.webp" height="512" width="768" alt="" >
      </a>
      
    </figure><figure class="gallery__item">
      <a href="https://scooorpion.github.io/media/posts/5/gallery/wallhaven-o3ke2m.jpg" data-size="5120x2880">
        <img loading="lazy" src="https://scooorpion.github.io/media/posts/5/gallery/wallhaven-o3ke2m-thumbnail.webp" height="432" width="768" alt="" >
      </a>
      
    </figure><figure class="gallery__item">
      <a href="https://scooorpion.github.io/media/posts/5/gallery/john-fowler-ppWthnXdbrM.jpg" data-size="7191x4815">
        <img loading="lazy" src="https://scooorpion.github.io/media/posts/5/gallery/john-fowler-ppWthnXdbrM-thumbnail.webp" height="514" width="768" alt="" >
      </a>
      
    </figure><figure class="gallery__item">
      <a href="https://scooorpion.github.io/media/posts/5/gallery/biemme-zeta-rF15wSGbUDs-unsplash.jpg" data-size="5472x3286">
        <img loading="lazy" src="https://scooorpion.github.io/media/posts/5/gallery/biemme-zeta-rF15wSGbUDs-unsplash-thumbnail.webp" height="461" width="768" alt="" >
      </a>
      
    </figure><figure class="gallery__item">
      <a href="https://scooorpion.github.io/media/posts/5/gallery/GKGwPE-WQAAcZPH.jpeg" data-size="2309x3464">
        <img loading="lazy" src="https://scooorpion.github.io/media/posts/5/gallery/GKGwPE-WQAAcZPH-thumbnail.webp" height="1152" width="768" alt="" >
      </a>
      
    </figure>
    </div>
  </div>

  <p>
    
  </p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>untitled</title>
        <author>
            <name>scooorpion</name>
        </author>
        <link href="https://scooorpion.github.io/jottings.html"/>
        <id>https://scooorpion.github.io/jottings.html</id>
        <media:content url="https://scooorpion.github.io/media/posts/4/katherine-gu-0UofLbRyr-I-unsplash.jpg" medium="image" />
            <category term="Informal essay"/>

        <updated>2024-06-01T23:14:18+08:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://scooorpion.github.io/media/posts/4/katherine-gu-0UofLbRyr-I-unsplash.jpg" alt="" />
                    Maybe I died&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://scooorpion.github.io/media/posts/4/katherine-gu-0UofLbRyr-I-unsplash.jpg" class="type:primaryImage" alt="" /></p>
                
  <p>
    Maybe I died a long time ago, died in the wet childhood, died in the messed up family, died in the broken ideal, died in the powerless feelings, died in memories, but in fact I am still alive, living in the pressure of life, living in the corner of society, living in the public opinion of others, living in the expectations of relatives, living in the dream of childhood...
  </p>

  <p>
    
  </p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Amusing Ourselves to Death</title>
        <author>
            <name>scooorpion</name>
        </author>
        <link href="https://scooorpion.github.io/amusing-ourselves-to-death.html"/>
        <id>https://scooorpion.github.io/amusing-ourselves-to-death.html</id>
        <media:content url="https://scooorpion.github.io/media/posts/3/museums-victoria-4klKI9u0p9I-unsplash.jpg" medium="image" />
            <category term="Book report"/>

        <updated>2024-05-28T01:01:08+08:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://scooorpion.github.io/media/posts/3/museums-victoria-4klKI9u0p9I-unsplash.jpg" alt="" />
                    引入 创作背景 在20世纪后半叶，随着电视媒体的兴起，渗透了日常生活的方方面面，成为现代社会生活的关键组成部分。电视的娱乐性、碎片化的表达方式排斥了思考与逻辑，将一切文化内容都转化为娱乐的附庸，使人们逐渐沉溺于娱乐至死的状态。尼尔·波兹曼关注并深刻理解了主流媒介变革对大众和社会的深远影响。&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://scooorpion.github.io/media/posts/3/museums-victoria-4klKI9u0p9I-unsplash.jpg" class="type:primaryImage" alt="" /></p>
                <h1>引入</h1>
<h3>创作背景</h3>
<p>在20世纪后半叶，随着电视媒体的兴起，渗透了日常生活的方方面面，成为现代社会生活的关键组成部分。电视的娱乐性、碎片化的表达方式排斥了思考与逻辑，将一切文化内容都转化为娱乐的附庸，使人们逐渐沉溺于娱乐至死的状态。尼尔·波兹曼关注并深刻理解了主流媒介变革对大众和社会的深远影响。</p>
<p>他指出，媒介具有定义现实世界的强大力量，并认为不同的媒介倾向性将塑造整个文化的特征。波兹曼对比了印刷媒介时代的“阐释时代”和电视媒介时代的“娱乐业时代”，强调<strong>电报在两者之间的衔接作用</strong>，导致人们进入了一个充满大量无关信息的世界，信息的传递方式和人们的行动都发生了根本性改变。电视的出现加剧了这种状况，使得人们不断制造各种问题来应对无用信息的泛滥。</p>
<p>乔治奥威尔的《1984》警示着外来压迫的奴隶化，而《美丽新世界》则探讨了人们逐渐爱上压迫的可能性。奥威尔害怕强行禁书，而赫胥黎担心失去对读书的兴趣。奥威尔担心真理被隐瞒，赫胥黎担心真理被淹没在无聊烦琐的世事中。奥威尔害怕受制于痛苦，而赫胥黎认为享乐会使人失去自由。简言之，奥威尔担心我们痛恨的东西会毁掉我们，而赫胥黎担心<strong>我们会毁于我们热爱的东西</strong>。</p>
<p>这本书想告诉大家的是，<strong>可能成为现实的，是赫胥黎的预言，而不是奥威尔的预言</strong>。<span style="text-decoration: line-through;"> </span></p>
<h1>媒介就是人们认识世界的方式</h1>
<p> </p>
<p>在传播学中，"媒介"（medium）通常指的是用于存储和传播信息的物质工具或平台。根据定义，媒介是传播过程中，用以扩大并延伸信息传送的工具。</p>
<p>麦克卢汉提出的“媒介即讯息”（Medium is the Message）理论进一步强调了媒介本身对信息传递的影响。他认为，媒介的<strong>物理特性</strong>和<strong>社会属性</strong>决定了其传播信息的方式，从而影响了信息的接收和理解。这一观点揭示了媒介与信息之间的密切关系，强调了媒介在信息传递中的重要作用。<strong>所以，媒介</strong><strong>也就是技术所创造的社会和文化环境。</strong></p>
<p>麦克卢汉认为在我们的文明中，真正重要的不是得到了什么信息，而是用什么媒介获取的信息，因为你要到的目的地总能到达，你要得到的信息总能得到。但我们如何抵达如何得到才是关键。每一种媒介都为思考表达观点，抒发情感提供了新的定位。从而创造出了独特的话语符号。</p>
<p>“媒介即隐喻”就是《娱乐至死》中提出的基本理论命题。波兹曼继承并发展了麦克卢汉的“媒介即讯息”理论，进一步指出，媒介不仅是传播信息的工具，更是一种隐喻，具有强大的暗示力和文化力量。</p>
<p><span style="text-decoration: line-through;">每一种媒介都通过其独特的符号系统来定义和塑造现实世界。例如，电视作为一种视觉媒介，通过图像和声音来传递信息，这种方式使得观众更容易被吸引和操控。因此，媒介不仅仅是传递信息的工具，更是通过其隐喻性质来影响人们的认知和行为模式。</span></p>
<h1>媒介即隐喻（Medium is the Metaphor）</h1>
<p>尼尔波兹曼认为，造成娱乐至死原因是媒介技术的改变。</p>
<p>技术——媒介（图示）</p>
<p>媒介依赖于技术发展，那么何为技术，技术是中立的吗？</p>
<p>技术是中立的吗？ 过往的科学界中普遍持有“技术是中立的，使用技术的人才具有立场。”这种观点。但作者认为，<strong>只有那些对技术的历史一无所知的人，才会相信技术是完全中立的。</strong>枪炮的发明使奴隶和贵族得以在战场上平等对峙;印刷术为各阶层的人们打开了同样的信息之门，邮差把知识一视同仁地送到茅屋和宫殿前。” 那么，如果以技术媒介的视角来看，枪炮拥有反阶级的意识形态。印刷术毁灭了宗教的霸权，所以从不存在所谓的技术中立。</p>
<p>媒介即隐喻的核心观点就是，技术从来不是中立的，它以自己的意识形态在改造我们。我们选择的媒介决定了我们的未来，我们选择什么样的媒介，就通往什么样的结局。（图示）<strong>并不是我</strong><strong>们</strong><strong>在使用技术，而是技术在</strong><strong>创</strong><strong>造媒介</strong><strong>来</strong><strong>使用我</strong><strong>们</strong>。</p>
<h1>新媒介诞生，文字至死，以及电视机如何毁灭我们</h1>
<p><span style="text-decoration: line-through;">波兹曼</span><span style="text-decoration: line-through;">认为，随着电视声像逐渐取代书写语言，美国社会从印刷统治转变为电视统治，这一变化导致了社会公共话语权的特征由曾经的理性和深度转变为庸俗化、碎片化和娱乐化。</span></p>
<p><strong>“语境”的意义以及重要性</strong></p>
<blockquote>
<p>掩藏在电视新闻节目超现实外壳下的是反交流的理论，这种理论以一种抛弃逻辑、理性 和秩序的话语为特点。在美学中，这种理论被称为“达达主义”;在哲学中，它被称为“虚无主义”;在精神病 学中，它被称为“精神分裂症”;如果用舞台术语来说，它可以被称为“杂耍”。</p>
</blockquote>
<p>波兹曼对“语境”的意义和重要性进行了深刻的探讨。首先，他指出电视作为一种媒介，其传播特点（简短、分散、画面化）导致所传递的信息缺乏连贯性，缺少真正的语境。这种伪语境的现象使得观众无法形成完整的认知框架，从而逐渐丧失理性认知能力。</p>
<p><strong>信息过剩：</strong><strong>信息——行动比</strong></p>
<p>在传统的口头文化和印刷文化中，信息的重要性在于其可能促成某种行动，而没有和行动关联的信息被视为无效。然而，随着电报和其他数字化媒介的出现，这种平衡被打破，导致了信息过剩的问题。</p>
<p>在现代媒介环境下，信息传播变得日益多元化和复杂化。虽然这种多样性推动了信息的流动和分享，加强了受众的参与和互动，但也带来了新的挑战，如信息过载和筛选困难，使人们在海量信息中寻找有价值信息的任务变得更加艰巨。此外，虚假信息和误导的传播可能对受众的认知和决策产生负面影响。</p>
<p>波兹曼认为，在现代社会中，大多数信息是无用的，最多只能提供一点谈资，而不能引导我们采取有益的行动。这种现象反映了信息-行动比的严重失衡，即信息的数量远远超过了其实际作用，从而导致了注意力被割裂和时间管理上的混乱</p>
<p><strong>信息的意义在于促成某种行动</strong>，但在现代媒介环境中，这种关联被削弱，导致人们在面对信息时无法做出合理的判断和行动。他认为，电视媒介造成的伪语境不仅影响了公众的认知能力，还改变了社会的文化语境，使得非理性的思维方式变得普遍。在传统的西方理性主义至上的文化语境里，“非理性”的思维方式是不可接受的，但在现代媒介环境中，这种思维方式却变得越来越普遍。</p>
<p>只有在一个完整的语境中，人们才能形成正确的认知框架，避免被无意义的娱乐内容所迷惑，从而保持理性和判断力。</p>
<p> </p>
            ]]>
        </content>
    </entry>
</feed>
